var _user$project$Main$foodOrderCard = function (food_order) {
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$th,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(food_order.food)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$th,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(food_order.status)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$th,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(food_order.quantity)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$th,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(food_order.price)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$foodOrderCards = function (food_orders) {
	return A2(
		_elm_lang$html$Html$tbody,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _user$project$Main$foodOrderCard, food_orders));
};
var _user$project$Main$allMessage = function (message) {
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(message),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$allMessages = function (messages) {
	return A2(
		_elm_lang$html$Html$ul,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _user$project$Main$allMessage, messages));
};
var _user$project$Main$filterRepeatOrder = F2(
	function (newOrder, orders) {
		return A2(
			_elm_lang$core$List$filter,
			function (order) {
				return !_elm_lang$core$Native_Utils.eq(order.id, newOrder.id);
			},
			orders);
	});
var _user$project$Main$orderToJs = _elm_lang$core$Native_Platform.outgoingPort(
	'orderToJs',
	function (v) {
		return v;
	});
var _user$project$Main$Flags = function (a) {
	return {data: a};
};
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {phxSocket: a, orders: b, messages: c, toastr_message: d};
	});
var _user$project$Main$Order = F5(
	function (a, b, c, d, e) {
		return {id: a, waiter: b, table: c, status: d, food_order: e};
	});
var _user$project$Main$FoodOrder = F4(
	function (a, b, c, d) {
		return {food: a, status: b, quantity: c, price: d};
	});
var _user$project$Main$decodeFoodOrder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Main$FoodOrder,
	A2(_elm_lang$core$Json_Decode$field, 'food', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'status', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'quantity', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'price', _elm_lang$core$Json_Decode$int));
var _user$project$Main$orderDecoder = A6(
	_elm_lang$core$Json_Decode$map5,
	_user$project$Main$Order,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'waiter', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'table', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'status', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'food_order',
		_elm_lang$core$Json_Decode$list(_user$project$Main$decodeFoodOrder)));
var _user$project$Main$modelDecoder = _elm_lang$core$Json_Decode$list(_user$project$Main$orderDecoder);
var _user$project$Main$SendCancelMessage = function (a) {
	return {ctor: 'SendCancelMessage', _0: a};
};
var _user$project$Main$orderCard = function (order) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('card'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('card-header'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h5,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mb-0'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('title-card'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$b,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('N:'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													_elm_lang$core$Basics$toString(order.id)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' '),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$b,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Mozo:'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																_elm_lang$core$Basics$toString(order.waiter)),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text(' '),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$b,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Mesa:'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			_elm_lang$core$Basics$toString(order.table)),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(' '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$b,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Estado:'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$Basics$toString(order.status)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' '),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('btn btn-success'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$href(
																									A2(
																										_elm_lang$core$Basics_ops['++'],
																										'/orders/',
																										A2(
																											_elm_lang$core$Basics_ops['++'],
																											_elm_lang$core$Basics$toString(order.id),
																											'/edit'))),
																								_1: {ctor: '[]'}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Agregar'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(' '),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$button,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Events$onClick(
																										_user$project$Main$SendCancelMessage(order.id)),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('btn btn-danger'),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Cancelar'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('card-body'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$table,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('table table-striped table-hover'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$thead,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$tr,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Plato'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Estado'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Cantidad'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Precio'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Main$foodOrderCards(order.food_order),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$orderList = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _user$project$Main$orderCard, model.orders));
};
var _user$project$Main$SendPort = {ctor: 'SendPort'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('btn btn-success'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$SendPort),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Send Message'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$Main$allMessages(model.messages),
				_1: {
					ctor: '::',
					_0: _user$project$Main$orderList(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$HandleSendError = function (a) {
	return {ctor: 'HandleSendError', _0: a};
};
var _user$project$Main$ReceiveChatMessage = function (a) {
	return {ctor: 'ReceiveChatMessage', _0: a};
};
var _user$project$Main$ReceiveNewOrder = function (a) {
	return {ctor: 'ReceiveNewOrder', _0: a};
};
var _user$project$Main$ReceiveCancelOrder = function (a) {
	return {ctor: 'ReceiveCancelOrder', _0: a};
};
var _user$project$Main$SendMessage = {ctor: 'SendMessage'};
var _user$project$Main$SetMessage = function (a) {
	return {ctor: 'SetMessage', _0: a};
};
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$init = function (flags) {
	var channel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('kitchen:1');
	var _p0 = A2(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$join,
		channel,
		A4(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
			'new_order',
			'kitchen:1',
			_user$project$Main$ReceiveNewOrder,
			A4(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
				'cancel_order',
				'kitchen:1',
				_user$project$Main$ReceiveCancelOrder,
				A4(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
					'waiter',
					'kitchen:1',
					_user$project$Main$ReceiveChatMessage,
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$init('ws://localhost:4000/socket/websocket'))))));
	var initSocket = _p0._0;
	var phxCmd = _p0._1;
	var valueDue = A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Main$modelDecoder, flags.data);
	var _p1 = valueDue;
	if (_p1.ctor === 'Ok') {
		return {
			ctor: '_Tuple2',
			_0: {
				orders: _p1._0,
				phxSocket: initSocket,
				messages: {ctor: '[]'},
				toastr_message: _elm_lang$core$Maybe$Nothing
			},
			_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
		};
	} else {
		return {
			ctor: '_Tuple2',
			_0: {
				orders: {ctor: '[]'},
				phxSocket: _fbonetti$elm_phoenix_socket$Phoenix_Socket$init(''),
				messages: {ctor: '[]'},
				toastr_message: _elm_lang$core$Maybe$Nothing
			},
			_1: _elm_lang$core$Platform_Cmd$none
		};
	}
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'PhoenixMsg':
				var _p3 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p2._0, model.phxSocket);
				var phxSocket = _p3._0;
				var phxCmd = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'SendMessage':
				var payload = _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'message',
							_1: _elm_lang$core$Json_Encode$string('holi')
						},
						_1: {ctor: '[]'}
					});
				var phxPush = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$onError,
					_user$project$Main$HandleSendError,
					A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						payload,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'waiter', 'kitchen:1')));
				var _p4 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, phxPush, model.phxSocket);
				var phxSocket = _p4._0;
				var phxCmd = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'ReceiveChatMessage':
				var _p6 = _p2._0;
				var messageDecoder = A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string);
				var somePayload = A2(_elm_lang$core$Json_Decode$decodeValue, messageDecoder, _p6);
				var example = A2(_elm_lang$core$Debug$log, 'entro', _p6);
				var _p5 = somePayload;
				if (_p5.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								messages: {ctor: '::', _0: _p5._0, _1: model.messages}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								messages: {ctor: '::', _0: 'Failed to receive message', _1: model.messages}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ReceiveNewOrder':
				var _p9 = _p2._0;
				var somePayload = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Main$orderDecoder, _p9);
				var example = A2(_elm_lang$core$Debug$log, 'entro', _p9);
				var _p7 = somePayload;
				if (_p7.ctor === 'Ok') {
					var _p8 = _p7._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								orders: {
									ctor: '::',
									_0: _p8,
									_1: A2(_user$project$Main$filterRepeatOrder, _p8, model.orders)
								}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								messages: {ctor: '::', _0: 'Failed to receive message', _1: model.messages}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ReceiveCancelOrder':
				var somePayload = A2(_elm_lang$core$Debug$log, 'data', _p2._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'HandleSendError':
				var message = 'Failed to Send Message';
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							messages: {ctor: '::', _0: message, _1: model.messages}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SendCancelMessage':
				var payload = _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'message',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$Basics$toString(_p2._0))
						},
						_1: {ctor: '[]'}
					});
				var phxPush = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$onError,
					_user$project$Main$HandleSendError,
					A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						payload,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'cancel_message', 'kitchen:1')));
				var _p10 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, phxPush, model.phxSocket);
				var phxSocket = _p10._0;
				var phxCmd = _p10._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'SendPort':
				var entre = A2(_elm_lang$core$Debug$log, 'entre', 'entre');
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$orderToJs('holi')
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Main$PhoenixMsg);
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (data) {
			return _elm_lang$core$Json_Decode$succeed(
				{data: data});
		},
		A2(_elm_lang$core$Json_Decode$field, 'data', _elm_lang$core$Json_Decode$string)));
